#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <pthread.h>
#include "a2_helper.h"

#define MAXSTEPS 5
#define NO_OF_THREADS 6
#define NO_OF_THREADS_MAIN 10
#define NAME_LEN 11

pthread_mutex_t lock, lockp6 = PTHREAD_MUTEX_INITIALIZER;


void rec(pthread_t* threads,  int* state, int i)
{
        if(i<6)
        {
        
        threads[i] = fork();
        if(threads[i] == 0){
        //pthread_join(threads[i], (void**) &state);
        info(BEGIN,6,i);
        rec(threads, state, i+1);
        }
        else
        {
        waitpid(threads[i], NULL, 0);
        if(i!=5)
         info(END, 6, i);
        }
       
        //exit(1);
        }
        else
        info(END, 6, 5);
        if(i!=1)
         exit(1);
        
}


int main(){
    init();
    int p2, p3, p4, p5, p6, p7;
    int p61,p62,p63, p64, p65;
   
    int cond_end6;
    int status = 0;
    pthread_t* threads = NULL;

    int stateMain = 0;
    pthread_t* threadsMain = NULL;
    threadsMain = malloc(NO_OF_THREADS_MAIN * sizeof(pthread_t));
    char** nameMain = NULL; 
    nameMain = malloc(NO_OF_THREADS_MAIN * sizeof(char*));

    


    int* state = NULL;
    char** name = NULL;
    info(BEGIN,1,0);
    p2 = fork();

    if(p2 == 0){
    
        info(BEGIN, 2, 0);
        p3 = fork();
        if(p3 == 0)
        {
            info(BEGIN, 3, 0);
            
            p5 = fork();
            if(p5 == 0)
            {
                info(BEGIN, 5, 0);
                p6 = fork();
                if(p6 == 0)
                    {
                        info(BEGIN, 6, 0);
                        //pthread_mutex_lock(&lock);
                         threads = malloc(NO_OF_THREADS * sizeof(pthread_t));
                         name = malloc(NO_OF_THREADS * sizeof(char*));


                          for (int i = 0; i < NO_OF_THREADS; i++) {
                                 name[i] = malloc(sizeof(char) * NAME_LEN);
                                 snprintf(name[i], NAME_LEN, "THREAD_%d", i);
                            }

                            

                           //rec(threads, state, 1);
                          // pthread_mutex_unlock(&lock);
                       
                      info(END, 6, 0);
                    }
                    else
                        {
                            waitpid(p6, NULL, 0);
                            info(END, 5, 0);
                        }
            }
            else
            {
                p7 = fork();
                if(p7 == 0){
                    info(BEGIN, 7, 0);
                    info(END, 7, 0);
                }
                else
                {
                    waitpid(p7, NULL, 0);
                    waitpid(p5, NULL, 0);
                    info(END, 3, 0);
                }
            }
      
        }
        else
        {
            p4 = fork();
            if(p4 == 0){
                 info(BEGIN, 4, 0);
                 info(END, 4, 0);
            }
            else
            {
                waitpid(p4, NULL, 0);
                waitpid(p3, NULL, 0);
                info(END, 2, 0);
            }
        }
   
    }
    else
        {
            waitpid(p2, NULL, 0);
            info(END, 1, 0);
        }


    return 0;
}
